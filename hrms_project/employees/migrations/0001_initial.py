# Generated by Django 4.2.9 on 2025-01-02 10:18

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True, verbose_name='employee ID')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, verbose_name='gender')),
                ('marital_status', models.CharField(choices=[('S', 'Single'), ('M', 'Married'), ('D', 'Divorced'), ('W', 'Widowed')], max_length=1, verbose_name='marital status')),
                ('blood_group', models.CharField(blank=True, max_length=5, verbose_name='blood group')),
                ('nationality', models.CharField(max_length=50, verbose_name='nationality')),
                ('address', models.TextField(verbose_name='address')),
                ('city', models.CharField(max_length=100, verbose_name='city')),
                ('state', models.CharField(max_length=100, verbose_name='state')),
                ('postal_code', models.CharField(max_length=10, verbose_name='postal code')),
                ('emergency_contact_name', models.CharField(max_length=100, verbose_name='emergency contact name')),
                ('emergency_contact_phone', models.CharField(max_length=15, verbose_name='emergency contact phone')),
                ('emergency_contact_relationship', models.CharField(max_length=50, verbose_name='emergency contact relationship')),
                ('date_hired', models.DateField(verbose_name='date hired')),
                ('employment_status', models.CharField(choices=[('FT', 'Full-Time'), ('PT', 'Part-Time'), ('CT', 'Contract'), ('IN', 'Intern'), ('PR', 'Probation')], max_length=2, verbose_name='employment status')),
                ('base_salary', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='base salary')),
                ('bank_name', models.CharField(max_length=100, verbose_name='bank name')),
                ('bank_account', models.CharField(max_length=50, verbose_name='bank account')),
                ('resume', models.FileField(blank=True, null=True, upload_to='employee_documents/resumes/', verbose_name='resume')),
                ('id_proof', models.FileField(blank=True, null=True, upload_to='employee_documents/id_proofs/', verbose_name='ID proof')),
                ('contract', models.FileField(blank=True, null=True, upload_to='employee_documents/contracts/', verbose_name='contract')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='employees.department')),
            ],
            options={
                'verbose_name': 'employee',
                'verbose_name_plural': 'employees',
                'ordering': ['-date_hired'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='employees.department')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=200, verbose_name='company')),
                ('position', models.CharField(max_length=100, verbose_name='position')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('responsibilities', models.TextField(verbose_name='responsibilities')),
                ('is_current', models.BooleanField(default=False, verbose_name='current job')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience', to='employees.employee')),
            ],
            options={
                'ordering': ['-end_date', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(max_length=200, verbose_name='institution')),
                ('degree', models.CharField(max_length=100, verbose_name='degree')),
                ('field_of_study', models.CharField(max_length=100, verbose_name='field of study')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('grade', models.CharField(blank=True, max_length=20, verbose_name='grade/GPA')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='employees.employee')),
            ],
            options={
                'ordering': ['-end_date', '-start_date'],
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='position',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='employees.position'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EmployeeSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(max_length=100, verbose_name='skill')),
                ('proficiency_level', models.PositiveSmallIntegerField(help_text='Proficiency level from 1-5', validators=[django.core.validators.MinValueValidator(1)], verbose_name='proficiency level')),
                ('years_of_experience', models.PositiveSmallIntegerField(verbose_name='years of experience')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='employees.employee')),
            ],
            options={
                'unique_together': {('employee', 'skill')},
            },
        ),
    ]
